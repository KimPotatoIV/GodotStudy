extends Node2D

'''
1. 클래스(Class)란?
	ㄴ 설계도(클래스 = 붕어빵 틀, 인스턴스 = 실제 붕어빵)
	ㄴ Godot의 GDScript에서는 각 .gd 파일이 하나의 클래스 역할을 함
	ㄴ class_name으로 전역 이름을 등록할 수 있음
	ㄴ 클래스는 인스턴스(실제 객체)를 만들어 씬에 추가해 사용

2. 클래스 기본 문법
	ㄴ 파일 최상단에 class_name과 extends를 씀
		ㄴ class_name 작성은 선택사항
	ㄴ 클래스 내부에는 var, const, signal, func 등을 정의할 수 있음

3. 인스턴스 생성
	3-1. class_name을 사용한 전역 생성
		ㄴ class_name으로 클래스 이름을 전역화 가능
	
	3-2. class_name 없이도 스크립트를 불러와 인스턴스를 생성할 수 있음
		ㄴ load() 등으로 .gd 파일을 불러와 사용 가능
'''

func _ready() -> void:
	var a_class: AClass = AClass.new()
	a_class.print_a_class()
	
	var b_class_script: Script = load("res://11_class/b_class.gd")
	var b_class: Node = b_class_script.new()
	b_class.print_b_class()

'''
4. class_name과 load() 방식의 차이 및 장단점
	항목			||	class_name 방식			|	load() 방식
	===========================================================================
	class_name	||	반드시 필요				|	필요 없음
	필요 여부		||							|
	---------------------------------------------------------------------------
	접근 방식		||	전역 이름으로 어디서든		|	스크립트 파일 경로를 통해
				||	바로 접근 가능				|	필요할 때 불러오기
	---------------------------------------------------------------------------
	인스턴스 생성	||	Class.new()				|	var script = 
				||							|	load("res://.../class.gd")
				||							|	var inst = script.new()
	---------------------------------------------------------------------------
	사용 용도		||	재사용이 많고, 씬 어디서든	|	단발성, 임시, 조건부 객체
				||	접근해야 하는 객체			|	(이벤트용 오브젝트, 외부
				||	(플레이어, 적, 아이템 등)	|	 라이브러리 스크립트, 테스트용)
	---------------------------------------------------------------------------
	장점			||	- 코드가 간결함			|	- 외부 혹은 수정이 어려운
				||	- 재사용성이 높음			|	  스크립트도 사용 가능
				||	- 씬 어디서든 쉽게			|	- 필요할 때만 인스턴스를
				||	  접근 가능				|	  생성하여 메모리 절약 가능
	---------------------------------------------------------------------------
	단점			||	- 전역 네임스페이스를 차지	|	- 문법이 길어짐
				||	- 불필요하게 전역 등록하면	|	- 매번 경로 지정 필요
				||	  관리가 번거로움			|	- 재사용성이 낮음
'''
