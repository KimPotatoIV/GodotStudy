extends Node2D

'''
1. 입력(Input)이란?
	ㄴ 게임에서 키보드, 마우스, 게임패드 등 사용자의 조작을 의미
	ㄴ 고도 엔진에서는 Input 클래스를 통해 입력을 감지하고 처리
	ㄴ 플레이어가 키보드나 마우스 입력을 하면, 입력 신호에 따라 행동

2. 입력 처리 방식
	2-1. Input 클래스 메서드 사용
		ㄴ Input.is_action_pressed("액션명")
		ㄴ Input.is_action_just_pressed("액션명")
		ㄴ Input.is_action_just_released("액션명")
		ㄴ 매 프레임마다 직접 호출하여 입력 상태를 확인
	
	2-2. _input(event) 함수 사용
		ㄴ 고도 엔진이 입력 이벤트가 발생할 때마다 자동 호출하는 콜백
		ㄴ event 매개변수로 어떤 입력이 발생했는지 확인 가능
		ㄴ 입력이 발생한 "순간"에만 호출되므로 효율적
		ㄴ 프레임 단위가 아닌 이벤트 단위로 동작
			(즉, 누르고 있는 동안은 매 프레임 반복 호출되지 않음)

3. Input 클래스 vs. _input() 비교
	===========================================================================
	Input 클래스	||	매 프레임 입력 상태를 직접 확인 (상태 기반)
				||	"누르고 있는 동안"의 처리에 적합
				||	ex) 캐릭터 이동
	===========================================================================
	_input()		||	특정 입력 이벤트가 발생한 순간만 감지 (이벤트 기반)
				||	단발성 입력 처리에 적합
				||	ex) 대화창 열기, 버튼 클릭, 메뉴 열기 등
	===========================================================================

4. Input 클래스와 _input()의 자세한 비교 및 사용 방법은 아래 링크를 참고
	ㄴ [Godot] 고도 엔진에서 Input vs. _input() 비교하기!
	ㄴ https://youtu.be/6PPrLQijeIE

5. Input Map
	5-1. Input Map 이란?
		ㄴ 고도 엔진에서 입력을 추상화하는 시스템
		ㄴ ex) "jump" 액션에 Space, W, Gamepad A 버튼을 동시에 등록 가능
	
	5-2. 설정 방법
		ㄴ Project -> Project Settings -> Input Map
	
	5-3. 사용 방법
		ㄴ Input 클래스에서 액션명을 그대로 사용
		
		if Input.is_action_just_pressed("ui_accept"):
			print("점프!")
'''
