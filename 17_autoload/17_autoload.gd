extends Node2D

'''
1. 디자인 패턴(Design Pattern)이란?
	ㄴ 소프트웨어 설계에서 자주 등장하는 문제를 해결하기 위해
		미리 정리해 둔 재사용 가능한 설계 방법
	ㄴ 경험 많은 개발자들이 여러 번 써보고 효과가 검증된 설계 공식
	ㄴ ex) 싱글톤(Singleton) 패턴, 옵저버(Observer) 패턴, 팩토리(Factory) 패턴 등

2. 싱글톤 패턴이란?
	ㄴ 소프트웨어 설계 패턴 중 하나
	ㄴ 프로그램 전체에서 단 하나의 인스턴스만 존재하도록 보장하는 디자인 패턴
	
	2-1. 특징
		ㄴ 객체를 한 번만 생성하고, 이후에는 모두 같은 객체를 참조
		ㄴ 전역적으로 접근할 수 있음
		ㄴ 공통으로 사용하는 데이터나 기능을 관리하기에 적합
	
	2-2. 언제 쓰나?
		ㄴ 게임 전체에서 공유해야 하는 데이터
		ㄴ 자주 쓰이는 매니저 객체

3. Autoload란?
	ㄴ 고도 엔진에서 싱글톤(Singleton) 패턴처럼 동작하는 기능
	ㄴ 게임 실행 시 자동으로 메모리에 올라옴
	ㄴ 씬이 바뀌어도 유지되며, 어디서든 접근 가능
	ㄴ 주로 각종 매니저 등에 활용

4. Autoload 등록 방법
	ㄴ Project -> Project Settings -> Globals -> AutoLoad 탭 ->
		스크립트 또는 씬 파일 선택 -> 이름 입력 (전역에서 접근할 이름) ->
		Add 클릭 -> 전역에서 바로 사용 가능

4. 정리
	ㄴ 싱글톤		= 프로그램 전체에서 하나만 존재하는 전역 객체
	ㄴ Autoload	= 고도 엔진에서 싱글톤을 쉽게 구현하는 방법
	ㄴ 공통 데이터(점수, 설정, 오디오 관리)에 유용
	ㄴ 실전 프로젝트에서 반드시 알아둬야 하는 핵심 기능
'''
