extends Node2D

'''
1. GDScript에서 Lifecycle 이란?
	ㄴ Godot Engine의 노드(Node)가 씬(Scene) 안에서
		생성되고 파괴될 때까지 거치는 과정을 의미
	ㄴ 노드가 언제 준비되고, 언제 물리 연산을 하고, 언제 화면에 그려지며,
		언제 제거되는지에 대한 전체 흐름을 말함
	ㄴ 노드는 씬 트리에 추가되면 일련의 함수(callback)가 특정 시점에 자동으로 호출됨

2. 주요 (콜백) 함수와 역할
	2-1. _init()
		ㄴ 언제: 스크립트(인스턴스) 생성 시점으로 노드가 씬 트리에 들어가기 전
		ㄴ 용도: 외부 노드에 의존하지 않는 작업으로 스크립트 내부의 변수 초기화
	
	2-2. _enter_tree()
		ㄴ 언제: 노드가 씬 트리에 들어갈 때
		ㄴ 용도: 씬 트리 관련 등록 등, 부모/자식 구조를 감지해야 할 때 사용
	
	2-3. _ready()
		ㄴ 언제: 해당 노드와 그 자식들이 씬 트리에 추가되어 사용 준비가 되었을 때
		ㄴ 용도: 다른 자식 노드나 씬 구성 요소에 의존하는 초기화를 안전하게 수행
	
	2-4. _process(delta: float)
		ㄴ 언제: 매 프레임(렌더 프레임)마다
		ㄴ 용도: 물리 계산이 필요 없는 연산
				(UI 애니메이션, 카메라 흔들림, 단순 시간 기반 시각 효과 등)
	
	2-5. _physics_process(delta: float)
		ㄴ 언제: 물리 프레임마다(고정 주기)
		ㄴ 용도: 물리 연산과 동기화되어야 할 때
				(충돌/물리 기반 이동, 안정적인 입력 처리)
	
	2-6. _exit_tree()
		ㄴ 언제: 노드가 씬 트리에서 제거될 때
		ㄴ 용도: 시그널 연결 해제, 그룹에서 제거, 리소스 정리 등
	
3. 실전 팁
	3-1. 다른 노드에 의존하는 초기화는 _ready()에서 수행 추천
		ㄴ _init()나 _enter_tree()에서는 안전하지 않을 수 있음
	
	3-2. 물리 기반 이동(충돌 포함)은 _physics_process()에서 처리 추천
		ㄴ 프레임 의존성 문제를 줄일 수 있음
	
	3-3. 자주 호출되는 작업은 연산량을 줄이는 것을 추천
		ㄴ 복잡한 계산을 매 프레임 하지 말고 필요시만 업데이트
	
	3-4. 노드 접근은 _ready()에서 캐싱 추천
		ㄴ 자주 접근하는 노드는 _ready()에서 변수에 담아 그 변수를 사용하라는 의미
		ㄴ 매 프레임 $ 접근은 비용이 있기 때문
	
	3-5. 시그널 연결은 보통 _ready()에서 하고,
		_exit_tree()에서 해제해 메모리 누수를 방지 추천
'''

# 부모와 자식 노드 간 호출 순서
func _init() -> void:
	print("Parent: _init()")

func _enter_tree() -> void:
	print("Parent: _enter_tree()")

func _ready() -> void:
	print("Parent: _ready()")
