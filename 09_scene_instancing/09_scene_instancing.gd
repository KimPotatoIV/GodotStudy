extends Node2D

'''
1. 인스턴싱(Instancing)이란?
	ㄴ 미리 만들어둔 Scene 리소스를 불러와서 새로운 객체(Node Tree)를 생성하는 것
	ㄴ ex) 탄막 슈팅 게임에서 Bullet Scene을 발사할 때마다 생성
	
	1-1. 왜 필요한가?
		ㄴ 같은 구조를 반복해서 다시 만들 필요 없음
		ㄴ 유지보수와 수정이 쉬움 (원본 Scene 수정 → 모든 인스턴스에 반영)
		ㄴ 코드 간결화
	
2. 인스턴싱 방법
	2-1. 에디터를 이용해 인스턴싱하는 방법
		ㄴ 체인 모양 버튼(Instantiate Child Scene) 혹은 Ctrl+Shift+A 단축키로 추가
	
	2-2. 코드를 이용해 인스턴싱하는 방법
		ㄴ	func _ready() -> void:
				var player_scene: PackedScene = load("res://Player.tscn")
				var player: CharacterBody2D = player_scene.instantiate()
				add_child(player)

3. 인스턴싱 할 때 메모리에 올린다는 말을 쓰는데, 무슨 의미일까?
	3-1. Scene 파일(.tscn) 자체는 단순히 설계도일 뿐
		ㄴ 이 상태로는 게임 실행 중에 아무 일도 안 일어남
	
	3-2. load("res://Player.tscn")
		ㄴ 씬 리소스를 메모리에 불러옴(아직 설계도만 불러온 개념으로 아무 것도 안 일어남)
	
	3-3. player_scene.instantiate()
		ㄴ 불러온 씬 리소스를 메모리에 올려 실제 객체화
		ㄴ 이때 비로소 Node들이 생성됨
	
	3-4. add_child(player)
		ㄴ 씬 트리에 연결해야 실제 화면에 표시됨
	
	ㄴ 결론적으로 인스턴싱이란?
		ㄴ 씬 리소스를 기반으로 새로운 객체를 메모리에 생성하는 과정

4. 간단하게 알아보는 컴퓨터의 작동 원리
	특징				|	CPU			|	RAM			|	HDD/SSD
	-------------------------------------------------------------------
	읽고 쓰는 속도		|	매우 빠름		|	빠름			|	느림
	-------------------------------------------------------------------
	저장 용량			|	매우 적음		|	적음			|	매우 많음
	-------------------------------------------------------------------
	전원에 따른		|	전원 off 시	|	전원 off 시	|	전원과 상관없이
	데이터 존재 여부	|	데이터 사라짐	|	데이터 사라짐	|	데이터 유지
	
	ㄴ CPU <-> RAM <-> HDD/SSD
		ㄴ 위와 같이 아주 간단한 구조의 컴퓨터가 존재
		ㄴ Scene.tscn 파일 등과 같은 리소스는 HDD/SSD에 존재
		ㄴ CPU와 HDD/SSD가 바로 통신하면 데이터 처리 속도가 너무 느림
		ㄴ 그래서 중간에 RAM이 존재
'''
